variables:
  GEOSX_TPL_TAG: 188-750

# only build non-draft, merge target PR's to develop
trigger: none
pr:
  branches:
    include:
    - develop
  drafts: false

stages:
- stage: checks
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - job: code_style
    variables:
      DOCKER_REPOSITORY: 'geosx/ubuntu20.04-gcc9'
      CMAKE_BUILD_TYPE: 'Release'
      BUILD_AND_TEST_ARGS: '--test-code-style'
    steps:
    - checkout: self
      clean: true
      submodules: false
    - script: scripts/ci_build_and_test.sh
  - job: documentation
    variables:
      DOCKER_REPOSITORY: 'geosx/ubuntu20.04-gcc9'
      CMAKE_BUILD_TYPE: 'Release'
      BUILD_AND_TEST_ARGS: '--test-documentation'
    steps:
    - checkout: self
      clean: true
      submodules: false
    - script: scripts/ci_build_and_test.sh
  - job: check_submodules
    steps:
    - script: scripts/test_submodule_updated.sh
      displayName: 'Run test_submodule_updated.sh'
  - job: check_pr_is_assigned
    steps:
    - script: |
        is_assigned=$(curl -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/repos/$(Build.Repository.Name)/pulls/$(System.PullRequest.PullRequestNumber) | \
        jq ".assignees|length");
        if [[ $is_assigned == 0 ]]; then exit 1; else exit 0; fi
      displayName: 'Check PR is assigned'
- stage: builds
  condition: succeededOrFailed()
  jobs:
  - job: build_and_test
    # Use maximum time limit
    timeoutInMinutes: 0
    strategy:
      matrix:
        # # Builds only the geosx executable (timeout when building tests)
        # ubuntu18_cuda10_clang8_gcc8_3_1_openmpi2_debug:
        #   JOB_NAME: 'Ubuntu CUDA debug (18.04, clang 8.0.0 + gcc 8.3.1, open-mpi 2.1.1, cuda-10.1.243)'
        #   DOCKER_REPOSITORY: 'geosx/ubuntu18.04-clang8.0.0-cuda10.1.243'
        #   CMAKE_BUILD_TYPE: 'Debug'
        #   BUILD_AND_TEST_ARGS: "--disable-unit-tests --build-exe-only"
        #   ENABLE_HYPRE: ON
        #   ENABLE_HYPRE_CUDA: ON
        #   ENABLE_TRILINOS: OFF
        # ubuntu18_cuda10_clang8_gcc8_3_1_openmpi2_release:
        #   JOB_NAME: 'Ubuntu CUDA (18.04, clang 8.0.0 + gcc 8.3.1, open-mpi 2.1.1, cuda-10.1.243)'
        #   DOCKER_REPOSITORY: 'geosx/ubuntu18.04-clang8.0.0-cuda10.1.243'
        #   CMAKE_BUILD_TYPE: 'Release'
        #   BUILD_AND_TEST_ARGS: "--disable-unit-tests"
        #   ENABLE_HYPRE: ON
        #   ENABLE_HYPRE_CUDA: ON
        #   ENABLE_TRILINOS: OFF
        # centos7_6_cuda10_gcc8_3_1_openmpi1_10_release:
        #   JOB_NAME: 'Centos (7.6, gcc 8.3.1, open-mpi 1.10.7, cuda 10.1.243)'
        #   DOCKER_REPOSITORY: 'geosx/centos7.6.1810-gcc8.3.1-cuda10.1.243'
        #   CMAKE_BUILD_TYPE: 'Release'
        #   BUILD_AND_TEST_ARGS: "--disable-unit-tests"
        # centos7_7_clang9_openmpi1_10_release:
        #   JOB_NAME: 'Centos (7.7, clang 9.0.0 + gcc 4.9.3, open-mpi 1.10.7)'
        #   DOCKER_REPOSITORY: 'geosx/centos7.7.1908-clang9.0.0'
        #   CMAKE_BUILD_TYPE: 'Release'
        # ubuntu20_gcc9_openmpi4_release:
        #   JOB_NAME: 'Ubuntu (20.04, gcc 9.3.0, open-mpi 4.0.3)'
        #   DOCKER_REPOSITORY: 'geosx/ubuntu20.04-gcc9'
        #   CMAKE_BUILD_TYPE: 'Release'
        # ubuntu20_gcc10_openmpi4_debug:
        #   JOB_NAME: 'Ubuntu debug (20.04, gcc 10.3.0, open-mpi 4.0.3)'
        #   DOCKER_REPOSITORY: 'geosx/ubuntu20.04-gcc10'
        #   CMAKE_BUILD_TYPE: 'Debug'
        ubuntu20_gcc10_openmpi4_release:
          VM_ImageName: 'ubuntu-20.04'
          JOB_NAME: 'Ubuntu (20.04, gcc 10.3.0, open-mpi 4.0.3)'
          DOCKER_REPOSITORY: 'geosx/ubuntu20.04-gcc10'
          CMAKE_BUILD_TYPE: 'Release'

    pool:
      vmImage: $(VM_ImageName)

    steps:
    - checkout: self
      clean: true
      submodules: false
    - script: scripts/ci_build_and_test.sh
      displayName: '($(JOB_NAME))'
  - job: build_and_test_osx
    timeoutInMinutes: 0
    pool:
      vmImage: 'macOS-12'
    steps:
    - checkout: self
      clean: true
      submodules: false
      # Extracting the GEOSX_TPL installation directory,
      # then downloads the TPLs and uncompress where needed,
      # and then deals with Homebrew third parties
    - script: |
        TPL_METADATA_URL=https://www.googleapis.com/storage/v1/b/geosx/o/TPL%2Fosx-${GEOSX_TPL_TAG}.tar
        TPL_BULK_URL=${TPL_METADATA_URL}?alt=media
        METADATA=$(curl -s "${TPL_METADATA_URL}")
        GEOSX_TPL_DIR=$(echo -n ${METADATA} | python3 -c "import sys, json; print(json.load(sys.stdin)['metadata']['GEOSX_TPL_DIR'], end='')")
        sudo mkdir -p -m a=rwx ${GEOSX_TPL_DIR}
        curl -s "${TPL_BULK_URL}" | tar --strip-component=1 --directory=${GEOSX_TPL_DIR} -xf -
        BREW_HASH=$(echo -n ${METADATA} | python3 -c "import sys, json; print(json.load(sys.stdin)['metadata']['BREW_HASH'], end='')")
        BREW_URL=https://raw.github.com/Homebrew/homebrew-core/${BREW_HASH}
        wget ${BREW_URL}/Formula/open-mpi.rb
        brew update
        HOMEBREW_NO_AUTO_UPDATE=1 brew install ./open-mpi.rb
        for dep in `brew deps open-mpi.rb`; do brew install $dep; done
        git submodule update --init --recursive src/cmake/blt
        git submodule update --init --recursive src/coreComponents/LvArray
        git submodule update --init --recursive src/coreComponents/constitutive/PVTPackage
        git submodule update --init src/coreComponents/mesh/PAMELA
        git submodule update --init --recursive src/coreComponents/fileIO/coupling/hdf5_interface
        python ${BUILD_SOURCESDIRECTORY}/scripts/config-build.py \
        -hc ${BUILD_SOURCESDIRECTORY}/host-configs/darwin-clang.cmake \
        -DBLT_MPI_COMMAND_APPEND:STRING="--oversubscribe" -DENABLE_VTK:BOOL=OFF
        cd build-darwin-clang-debug
        make -j $(nproc) VERBOSE=1
      # - ctest -V -E "testUncrustifyCheck|testDoxygenCheck|blt_mpi_smoke"
      displayName: 'Mac_OSX'

