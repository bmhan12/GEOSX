# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  GEOSX_TPL_TAG: 174-723

#trigger:
#- develop

pool:
  vmImage: ubuntu-latest

jobs:
- job: Hello_World
  steps:
  - script: echo Hello, world
    displayName: 'Run a one-line script'

  - script: |
      echo Add other tasks to build, test, and deploy your project.
      echo See https://aka.ms/yaml
    displayName: 'Run a multi-line script'
- job: check_submodules
  steps:
  - script: scripts/test_submodule_updated.sh
    displayName: 'Run test_submodule_updated.sh'
- job: documentation
  variables:
    VM_IMAGE: 'ubuntu-20.04'
    DOCKER_REPOSITORY: 'geosx/ubuntu20.04-gcc9'
    CMAKE_BUILD_TYPE: 'Release'
    BUILD_AND_TEST_ARGS: '--test-documentation'
  pool:
      vmImage: $(VM_IMAGE)
  steps:
  - checkout: self
    clean: true
    submodules: false
  - script: |
      git submodule update --init --recursive src/cmake/blt
      git submodule update --init --recursive src/coreComponents/LvArray
      git submodule update --init --recursive src/coreComponents/constitutive/PVTPackage
      git submodule update --init src/coreComponents/mesh/PAMELA
      git submodule update --init --recursive src/coreComponents/fileIO/coupling/hdf5_interface
      # The linux build relies on two environment variables DOCKER_REPOSITORY and GEOSX_TPL_TAG to define the TPL version.
      # And another CMAKE_BUILD_TYPE to define the build type we want for GEOSX.
      # Optional BUILD_AND_TEST_ARGS to pass arguments to travis_build_and_test.sh script.
      #
      # We extract the location of the GEOSX_TPL from the container...
      GEOSX_TPL_DIR=$(docker run --rm ${DOCKER_REPOSITORY}:${GEOSX_TPL_TAG} /bin/bash -c 'echo ${GEOSX_TPL_DIR}')
      # ... so we can install GEOSX alongside. This is assumed for bundling the binaries, so consider modifying with care.
      GEOSX_DIR=${GEOSX_TPL_DIR}/../GEOSX-INSTALL
      # We need to know where the code folder is mounted inside the container so we can run the script at the proper location!
      # Since this information is repeated twice, we use a variable.
      TRAVIS_BUILD_DIR_MOUNT_POINT=/tmp/GEOSX
      # We need to keep track of the building container (hence the `CONTAINER_NAME`)
      # so we can extract the data from it later (if needed). Another solution would have been to use a mount point,
      # but that would not have solved the problem for the TPLs (we would require extra action to copy them to the mount point).
      CONTAINER_NAME=geosx_build
      # Now we can build GEOSX.
      while sleep 5m; do echo "... still building ..."; done & 
      docker run
      --name=${CONTAINER_NAME}
      --volume=${BUILD_SOURCESDIRECTORY}:${TRAVIS_BUILD_DIR_MOUNT_POINT}
      --cap-add=ALL
      -e HOST_CONFIG=${HOST_CONFIG:-host-configs/environment.cmake}
      -e CMAKE_BUILD_TYPE
      -e GEOSX_DIR=${GEOSX_DIR}
      -e ENABLE_HYPRE=${ENABLE_HYPRE:-OFF}
      -e ENABLE_HYPRE_CUDA=${ENABLE_HYPRE_CUDA:-OFF}
      -e ENABLE_TRILINOS=${ENABLE_TRILINOS:-ON}
      ${DOCKER_REPOSITORY}:${GEOSX_TPL_TAG}
      ${TRAVIS_BUILD_DIR_MOUNT_POINT}/scripts/travis_build_and_test.sh ${BUILD_AND_TEST_ARGS};
