name: hello-world
# on: push
on:
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - synchronize
      - ready_for_review

env:
  GEOSX_TPL_TAG: 203-915

jobs:
  check_pull_request_is_not_a_draft:
    runs-on: ubuntu-latest
    steps:
    - name: Check that the PR is not a draft (cancel rest of jobs otherwise)
      run: |
        echo "Is PR a draft?"
        echo ${{ toJSON(github.event.pull_request.draft) }}
        if [[ ${{ toJSON(github.event.pull_request.draft) }} == true ]]; then "false" ; else "true"; fi

  check-pull-request-is-assigned:
    # if: 'github.event.pull_request.assigned'
    needs: [check_pull_request_is_not_a_draft]
    runs-on: ubuntu-latest
    # continue-on-error: true
    steps:
    - name: Check that the PR is assigned
      # run: echo '${{ toJSON(github.event.pull_request.assigned) }}'

# This works!
# if [[ ${{ toJSON(github.event.pull_request.assigned) }} == null ]]; then echo 'Passed!'; else echo 'Failed!'; fi
      run: |
        echo "Is PR Assigned? (Check for Assignee ID)"
        echo ${{ toJSON(github.event.pull_request.assignee.id) }}
        if [[ ${{ toJSON(github.event.pull_request.assignee.id) }} != null ]]; then "true" ; else "false"; fi
  check-submodules:
    # if: '! github.event.pull_request.draft'
    needs: [check_pull_request_is_not_a_draft]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        submodules: false
    - name: Check that submodules are up to date
      run: "scripts/test_submodule_updated.sh"

  code-style:
    needs: [check_pull_request_is_not_a_draft]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        submodules: false
    - name: Check style
      env:
        DOCKER_REPOSITORY: geosx/ubuntu20.04-gcc9
        CMAKE_BUILD_TYPE: Release
        BUILD_AND_TEST_ARGS: --test-code-style
      run: ./scripts/ci_build_and_test.sh
    # <<: *__geosx_linux_build
    # env:
    # - DOCKER_REPOSITORY=geosx/ubuntu20.04-gcc9
    # - CMAKE_BUILD_TYPE=Release
    # - BUILD_AND_TEST_ARGS=--test-code-style

  documentation:
    needs: [check_pull_request_is_not_a_draft]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        submodules: false
    - name: Check documentation
      env:
        DOCKER_REPOSITORY: geosx/ubuntu20.04-gcc9
        CMAKE_BUILD_TYPE: Release
        BUILD_AND_TEST_ARGS: --test-documentation
      run: ./scripts/ci_build_and_test.sh


  builds:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs: [check_pull_request_is_not_a_draft]
    # if: '! github.event.pull_request.draft'
    # runs-on: ubuntu-latest
    strategy:

      # In-progress jobs will not be cancelled if there is a failure
      fail-fast : false
      matrix:
        include:
          - name: Ubuntu (20.04, gcc 9.3.0, open-mpi 4.0.3)
            DOCKER_REPOSITORY: geosx/ubuntu20.04-gcc9
            CMAKE_BUILD_TYPE: Release
            os: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        submodules: false
    # - name: Checkout
    #   uses: actions/checkout@v3
    #   with:
    #     submodules: true
    #     lfs: true

    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v2

    # TODO Add login details for pushing
    #- name: Login to DockerHub
    #  uses: docker/login-action@v2
    #  with:
    #    username: ${{ secrets.DOCKERHUB_USERNAME }}
    #    password: ${{ secrets.DOCKERHUB_TOKEN }}

    # It's easier to reference named environment variables than
    # indexes of the matrix or github context variables
    # - name: Set Environment
    #   env:
    #     dockerfile: ${{ matrix.DOCKERFILE }}
    #     docker_repository: ${{ matrix.DOCKER_REPOSITORY }}
    #     docker_compiler_build_arg: ${{ matrix.DOCKER_COMPILER_BUILD_ARG }}
    #     os: ${{ matrix.os }}
    #     install_dir: ${{ matrix.INSTALL_DIR }}
    #   run: |
    #     echo "DOCKERFILE=$dockerfile" >> $GITHUB_ENV
    #     echo "DOCKER_REPOSITORY=$docker_repository" >> $GITHUB_ENV

    - name: Print environment
      run: printenv

    - name: Run build and test script
      env:
        DOCKER_REPOSITORY: ${{ matrix.DOCKER_REPOSITORY }}
        CMAKE_BUILD_TYPE: ${{ matrix.CMAKE_BUILD_TYPE }}
      run: ./scripts/ci_build_and_test.sh

    # - name: Run the docker build and push docker script
    #   run: bash -x ./scripts/docker_build_and_push.sh

  # Hello world
    # steps:
    # - name: Checkout Repository
    #   uses: actions/checkout@v3
    #   with:
    #     submodules: false
    # - name: my-step
    #   run: echo "Hello World!"

  # check-all-jobs-succeeded:
  #   runs-on: ubuntu-latest
  #   needs: [ check-pull-request-is-assigned, check-submodules, code-style, documentation, build ]
  #   steps:
    # - name: Checking if all the non blocking failures jobs (i.e. fail-at-end jobs) have succeeded...
    # - name: Checking if all other jobs have succeeded...
      # run: if [[ ${{ toJSON(github.event.pull_request.assigned) }} == true ]]; then "true" ; else "false"; fi
        # echo 444444
        # echo '${{ toJSON(contains(join(needs.*.result, ','), 'failure')) }}'
      # run: |
      #   echo "Have all other jobs passed?"
      #   echo ${{ contains(join(needs.*.result, ','), 'failure') }}
      #   echo 11111111
      #   echo '${{ toJSON(needs) }}'
      #   echo 2222222
      #   echo '${{ join(needs.*.result, ',') }}'
      #   echo 3333333
      #   echo '${{ toJSON(join(needs.*.result, ',')) }}'
      #   if [[ ${{ contains(join(needs.*.result, ','), 'failure') }} == true ]]; then "false" ; else "true"; fi
  dump_contexts_to_log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'
      - name: Dump job context
        run: echo '${{ toJSON(job) }}'
      - name: Dump steps context
        run: echo '${{ toJSON(steps) }}'
      - name: Dump runner context
        run: echo '${{ toJSON(runner) }}'
      - name: Dump strategy context
        run: echo '${{ toJSON(strategy) }}'
      - name: Dump matrix context
        run: echo '${{ toJSON(matrix) }}'


# run: "true"